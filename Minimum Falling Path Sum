Given a square array of integers A, we want the minimum sum of a falling path through A.

A falling path starts at any element in the first row, and chooses one element from each row.
The next row's choice must be in a column that is different from the previous row's column by at most one.

 

Example 1:

Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: 12
Explanation: 
The possible falling paths are:
[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
The falling path with the smallest sum is [1,4,7], so the answer is 12.



https://leetcode.com/problems/minimum-falling-path-sum/
----------------------------------------------------------------------------------------------

int minFallingPathSum(int** A, int ASize, int* AColSize){
    int left[] = {1,1,1};
    int right[] = {-1,0,1};
    
     int matrix[ASize][ASize];
    
        for(int j=0;j<ASize;j++)
        {
             for(int i=0;i<ASize;i++)
            {
                 if(j==0)
                 {
                    matrix[j][i]=A[j][i];
                 }
                 else
                 {
                     matrix[j][i]=0;
                 }
            }
        }
   int result= INT_MAX;
   for(int t=0;t<ASize;t++)
    {
               
        int temp = findpath(A,matrix,0,t,INT_MAX,ASize,left,right); 
        if(temp < result)
        {
            result = temp;
        }  
    }
    return result;
}

int findpath(int** A,int matrix[3][3],int row,int col,int max,int n,int left[],int right[])
{ 
    for(int i=0;i<3;i++)
    { 
        int temprow = row + left[i];
        int  tempcol = col + right[i];
        if((temprow>=0)&&(tempcol>=0)&&(temprow<n)&&(tempcol<n))
        {
            matrix[temprow][tempcol] = matrix[row][col] + A[temprow][tempcol];  
            max = findpath(A,matrix,temprow,tempcol,max,n,left,right);  
        }
    }
    
    if((max>matrix[row][col])&&(row == n-1))
    {
         max = matrix[row][col];
    }       
    return max;
}
/*TODO:not working for 4*4 input*/
